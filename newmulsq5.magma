

mulz5n := function(J,D,n)

F := BaseField(J);
P<X> := PolynomialRing(F);
z5 := (RootOfUnity(5,F))^n;
if Degree(D[1]) eq 1 then 
	a := z5*Coefficient(D[1],0);
	b := Coefficient(D[2],0);
	D5 := J![X+a,b];
	return D5;
end if;
A := z5*Coefficient(D[1],1);
B := z5^2*Coefficient(D[1],0);
C := (1/z5)*Coefficient(D[2],1);
D := Coefficient(D[2],0);

U := X^2 + A*X + B;
V := C*X + D;
D5 := J![U,V];
return D5;
end function;




mulsq5 := function(J,D)

D1 := mulz5n(J,D,1);
D4 := mulz5n(J,D,4);
D0 := D;

return 2*D1 + 2*D4 + D0;

end function;

multrz := function(J,D)
D1 := mulz5n(J,D,1);
D4 := mulz5n(J,D,4);
return D1 + D4;
end function;




RR<A,B,C,D> := PolynomialRing(Rationals(),4);

sym_stuv := function(n) 
	if n eq 0 then
		return 2*D-A*C;   // This is t+v
	end if;
	if n eq 1 then 
		return   -A*D+ A^2*C - 2*B*C;   // This is st+uv
	end if;
return -A*$$(n-1) - B*$$(n-2);     // Fibonacci like Sequence since s,u are roots of X^2 -AX + B
end function;


sym_svut := function(n) 
	if n eq 0 then
		return 2*D-A*C;   // This is t+v
	end if;
	if n eq 1 then 
		return -A*D + 2*B*C;   // This is sv+ut
	end if;
return -A*$$(n-1) - B*$$(n-2);     // Fibonacci like Sequence since s,u are roots of X^2 -AX + B
end function;

// d = Sqrt(5) and we get with this function [(1+d)/2]*D 
multrzrat := function(J,D,d) 

F := BaseField(J);
A := Coefficient( D[1],1);
B := Coefficient( D[1],0);
C := Coefficient( D[2],1);
D := Coefficient( D[2],0);
vec := [A,B,C,D];

// This is y^2 = x^5 + h
h := F!-Evaluate(DefiningEquation(Curve(J)), [0,0,1]);

svut0 := Evaluate(sym_svut(0),vec);
svut1 := Evaluate(sym_svut(1),vec);
svut2 := Evaluate(sym_svut(2),vec);
svut3 := Evaluate(sym_svut(3),vec);
svut4 := Evaluate(sym_svut(4),vec);
svut5 := Evaluate(sym_svut(5),vec);
svut6 := Evaluate(sym_svut(6),vec);
svut7 := Evaluate(sym_svut(7),vec);
svut8 := Evaluate(sym_svut(8),vec);

stuv0 := Evaluate(sym_stuv(0),vec);
stuv1 := Evaluate(sym_stuv(1),vec);
stuv2 := Evaluate(sym_stuv(2),vec);
stuv3 := Evaluate(sym_stuv(3),vec);
sigma1 :=(1/2)*(2*h - A^5 - 5*A*B^2 + 5*A^3*B - C^2 *(A^2 - 4*B)); 

An := 1/2*(d - 1)*(A*B*(A^2 - 3*B)) - 3*B^2*A  - (d + 3)*(h + sigma1);
Ad := A^4 - 4*A^2*B + 2*B^2+ (-d + 1)*B*(A^2 - 2*B) + 1/2*(-d + 7)*B^2;

Bn:= B^2*(A^2 - 2*B) -(-d - 1)*sigma1*A -(-d - 1)*h*A + 1/2*(d + 7)*B^3;
Bd := A^4 - 4*A^2*B + 2*B^2 + (-d + 1)*B*(A^2-2*B) + 1/2*(-d + 7)*B^2;

Cn := 
+ 1/2*(d - 5)*B^2*(stuv3)-5*B^3*(stuv1)+(5*d + 10)*B^3*(svut1)
+ 1/2*(-7*d - 9)*B^2*(svut3)+(-3*d - 1)*B*(svut5)+(d + 3)*(svut7) 
+ (-8*d - 16)*h*B*(svut0)+ (4*d + 8)*h*(A^2 - 2*B)*(svut0);
 
Cd := A^8 - 8*A^6*B+20*A^4*B^2-16*A^2*B^3+2*B^4 + 1/2*(-3*d - 1)*(A^6*B - 6*A^4*B^2 +9*A^2*B^3 -2*B^4) +
1/2*(3*d + 11)*(A^4*B^2 -4*A^2*B^3+2*B^4) + + 1/2*(-5*d - 17)*(A^2*B^3 -2*B^4) + (5*d + 5)*B^4;

Dn :=
- 1/2*(d + 5)*B^3*(stuv2)+ 1/2*(5*d + 5)*B^4*stuv0    -(2*d + 6)*h*A*stuv0*(A^2 - 3*B)
+ (2*d + 6)*B^3*svut2 + (2*d + 6)*h*A*B*stuv0    -1/2*(9*d + 17)*B^2 * svut4
+ 1/2*(d + 3)*B*svut6 + svut8;

Dd := 
A^8- 8*A^6*B +20*A^4*B^2-16*A^2*B^3+2*B^4-1/2*(3*d + 1)*(A^6*B-6*A^4*B^2+9*A^2*B^3-2*B^4)
+ 1/2*(3*d + 11)*(A^4*B^2-4*A^2*B^3+2*B^4)-1/2*(5*d + 17)*(A^2*B^3-2*B^4)+(5*d + 5)*B^4;

as := An/Ad;
bs := Bn/Bd;
cs := Cn/Cd;
ds := Dn/Dd;

rvec := [as,bs,cs,ds];
P<X> := PolynomialRing(F);
return J![X^2 + as*X + bs, cs*X + ds];
end function;


// This return [(1+Sq5)/2]D - [(1-Sq5)/2]*D = [Sq5]*D
mulsq5ratJ := function(J,D,d) 

F := BaseField(J);
h := F!-Evaluate(DefiningEquation(Curve(J)), [0,0,1]);
P<A,B,C> := PolynomialRing(F,3);


a := -Coefficient(D[1],1);
b := Coefficient(D[1],0);
c := Coefficient(D[2],1);

vec := [a,b,c];

An :=
-9/2*C^2*B^15 + 5/8*C^2*B^14*A^2 + 1/8*C^2*B^13*A^4 - 112*h*C^2*B^12*A + 
    238*h*C^2*B^11*A^3 - 253/2*h*C^2*B^10*A^5 + 16*h^2*C^2*B^10 + 
    45/2*h*C^2*B^9*A^7 + 1520*h^2*C^2*B^9*A^2 - h*C^2*B^8*A^9 - 
    3221*h^2*C^2*B^8*A^4 + 2406*h^2*C^2*B^7*A^6 + 1376*h^3*C^2*B^7*A - 
    864*h^2*C^2*B^6*A^8 - 4984*h^3*C^2*B^6*A^3 + 178*h^2*C^2*B^5*A^10 + 
    8936*h^3*C^2*B^5*A^5 - 192*h^4*C^2*B^5 - 25*h^2*C^2*B^4*A^12 - 
    7640*h^3*C^2*B^4*A^7 - 9040*h^4*C^2*B^4*A^2 + 2*h^2*C^2*B^3*A^14 + 
    3184*h^3*C^2*B^3*A^9 + 11232*h^4*C^2*B^3*A^4 - 632*h^3*C^2*B^2*A^11 - 
    4544*h^4*C^2*B^2*A^6 - 512*h^5*C^2*B^2*A + 48*h^3*C^2*B*A^13 + 
    576*h^4*C^2*B*A^8 + 128*h^5*C^2*B*A^3 - 51/16*B^16*A + 19/4*B^15*A^3 - 
    1/2*B^14*A^5 - 129/2*h*B^14 - 1/8*B^13*A^7 - 178*h*B^13*A^2 + 444*h*B^12*A^4
    - 785/2*h*B^11*A^6 + 806*h^2*B^11*A + 603/4*h*B^10*A^8 + 1353*h^2*B^10*A^3 -
    47/2*h*B^9*A^10 - 4940*h^2*B^9*A^5 + 256*h^3*B^9 + h*B^8*A^12 + 
    5605*h^2*B^8*A^7 + 184*h^3*B^8*A^2 - 3212*h^2*B^7*A^9 - 4472*h^3*B^7*A^4 + 
    1033*h^2*B^6*A^11 + 10928*h^3*B^6*A^6 - 1520*h^4*B^6*A - 204*h^2*B^5*A^13 - 
    13776*h^3*B^5*A^8 - 13952*h^4*B^5*A^3 + 27*h^2*B^4*A^15 + 9452*h^3*B^4*A^10 
    + 24608*h^4*B^4*A^5 - 192*h^5*B^4 - 2*h^2*B^3*A^17 - 3472*h^3*B^3*A^12 - 
    15008*h^4*B^3*A^7 - 5888*h^5*B^3*A^2 + 644*h^3*B^2*A^14 + 3328*h^4*B^2*A^9 +
    6784*h^5*B^2*A^4 - 48*h^3*B*A^16 + 32*h^4*B*A^11 - 2432*h^5*B*A^6 - 
    512*h^6*B*A - 64*h^4*A^13 + 192*h^5*A^8 + 256*h^6*A^3
;

 Ad :=
81/16*B^16 - 9/2*B^15*A^2 + B^14*A^4 - 261/2*h*B^13*A + 251/2*h*B^12*A^3 - 
    51/2*h*B^11*A^5 - 18*h^2*B^11 - 13/2*h*B^10*A^7 + 1317*h^2*B^10*A^2 + 
    2*h*B^9*A^9 - 1438*h^2*B^9*A^4 + 399*h^2*B^8*A^6 + 304*h^3*B^8*A + 
    56*h^2*B^7*A^8 - 6184*h^3*B^7*A^3 - 29*h^2*B^6*A^10 + 7752*h^3*B^6*A^5 + 
    16*h^4*B^6 - 2*h^2*B^5*A^12 - 3112*h^3*B^5*A^7 - 1760*h^4*B^5*A^2 + 
    h^2*B^4*A^14 + 112*h^3*B^4*A^9 + 11936*h^4*B^4*A^4 + 192*h^3*B^3*A^11 - 
    16736*h^4*B^3*A^6 - 128*h^5*B^3*A - 32*h^3*B^2*A^13 + 9696*h^4*B^2*A^8 + 
    3328*h^5*B^2*A^3 - 2560*h^4*B*A^10 - 2560*h^5*B*A^5 + 256*h^4*A^12 + 
    512*h^5*A^7 + 256*h^6*A^2
;
 Bn :=
-3/2*C^2*B^15*A + 3/8*C^2*B^14*A^3 + 21*h*C^2*B^13 - 365/4*h*C^2*B^12*A^2 + 
    193/2*h*C^2*B^11*A^4 - 147/4*h*C^2*B^10*A^6 + 72*h^2*C^2*B^10*A + 
    9/2*h*C^2*B^9*A^8 + 442*h^2*C^2*B^9*A^3 - 563*h^2*C^2*B^8*A^5 - 
    448*h^3*C^2*B^8 + 240*h^2*C^2*B^7*A^7 - 960*h^3*C^2*B^7*A^2 - 
    32*h^2*C^2*B^6*A^9 + 2668*h^3*C^2*B^6*A^4 - 4*h^2*C^2*B^5*A^11 - 
    3368*h^3*C^2*B^5*A^6 + 3136*h^4*C^2*B^5*A + h^2*C^2*B^4*A^13 + 
    2452*h^3*C^2*B^4*A^8 - 4624*h^4*C^2*B^4*A^3 - 984*h^3*C^2*B^3*A^10 + 
    1472*h^4*C^2*B^3*A^5 + 256*h^5*C^2*B^3 + 200*h^3*C^2*B^2*A^12 - 
    1600*h^5*C^2*B^2*A^2 - 16*h^3*C^2*B*A^14 - 32*h^4*C^2*B*A^9 + 
    384*h^5*C^2*B*A^4 + 9/16*B^17 - 13/8*B^16*A^2 + 15/8*B^15*A^4 - 3/8*B^14*A^6
    - 23/2*h*B^14*A - 113*h*B^13*A^3 + 206*h*B^12*A^5 + 139*h^2*B^12 - 
    277/2*h*B^11*A^7 + 257*h^2*B^11*A^2 + 165/4*h*B^10*A^9 - 41*h^2*B^10*A^4 - 
    9/2*h*B^9*A^11 - 735*h^2*B^9*A^6 - 2488*h^3*B^9*A + 714*h^2*B^8*A^8 + 
    3424*h^3*B^8*A^3 - 255*h^2*B^7*A^10 + 2056*h^3*B^7*A^5 - 304*h^4*B^7 + 
    26*h^2*B^6*A^12 - 6392*h^3*B^6*A^7 + 9712*h^4*B^6*A^2 + 5*h^2*B^5*A^14 + 
    6048*h^3*B^5*A^9 - 28352*h^4*B^5*A^4 - h^2*B^4*A^16 - 3396*h^3*B^4*A^11 + 
    28016*h^4*B^4*A^6 + 3136*h^5*B^4*A + 1152*h^3*B^3*A^13 - 13536*h^4*B^3*A^8 -
    5888*h^5*B^3*A^3 - 212*h^3*B^2*A^15 + 3872*h^4*B^2*A^10 + 640*h^5*B^2*A^5 + 
    256*h^6*B^2 + 16*h^3*B*A^17 - 704*h^4*B*A^12 + 1024*h^5*B*A^7 - 
    256*h^6*B*A^2 + 64*h^4*A^14 - 192*h^5*A^9 - 256*h^6*A^4
;
 Bd :=
81/16*B^16 - 9/2*B^15*A^2 + B^14*A^4 - 261/2*h*B^13*A + 251/2*h*B^12*A^3 - 
    51/2*h*B^11*A^5 - 18*h^2*B^11 - 13/2*h*B^10*A^7 + 1317*h^2*B^10*A^2 + 
    2*h*B^9*A^9 - 1438*h^2*B^9*A^4 + 399*h^2*B^8*A^6 + 304*h^3*B^8*A + 
    56*h^2*B^7*A^8 - 6184*h^3*B^7*A^3 - 29*h^2*B^6*A^10 + 7752*h^3*B^6*A^5 + 
    16*h^4*B^6 - 2*h^2*B^5*A^12 - 3112*h^3*B^5*A^7 - 1760*h^4*B^5*A^2 + 
    h^2*B^4*A^14 + 112*h^3*B^4*A^9 + 11936*h^4*B^4*A^4 + 192*h^3*B^3*A^11 - 
    16736*h^4*B^3*A^6 - 128*h^5*B^3*A - 32*h^3*B^2*A^13 + 9696*h^4*B^2*A^8 + 
    3328*h^5*B^2*A^3 - 2560*h^4*B*A^10 - 2560*h^5*B*A^5 + 256*h^4*A^12 + 
    512*h^5*A^7 + 256*h^6*A^2
;
Cn :=
1/5*d*A^27*B^5*C*h^3 + 308/5*d*A^26*B^3*C*h^4 - 34/5*d*A^25*B^6*C*h^3 + 1216/5*d*A^25*B*C*h^5 - 1/5*d*A^24*B^5*C^3*h^3 - 6472/5*d*A^24*B^4*C*h^4 + 132*d*A^23*B^7*C*h^3 - 308/5*d*A^23*B^3*C^3*h^4 - 
    24336/5*d*A^23*B^2*C*h^5 + 1/10*d*A^22*B^10*C*h^2 + 33/5*d*A^22*B^6*C^3*h^3 + 62412/5*d*A^22*B^5*C*h^4 - 1216/5*d*A^22*B*C^3*h^5 - 768/5*d*A^22*C*h^6 - 7223/5*d*A^21*B^8*C*h^3 + 
    6232/5*d*A^21*B^4*C^3*h^4 + 216864/5*d*A^21*B^3*C*h^5 + 117/20*d*A^20*B^11*C*h^2 - 626/5*d*A^20*B^7*C^3*h^3 - 73312*d*A^20*B^6*C*h^4 + 25264/5*d*A^20*B^2*C^3*h^5 + 2240*d*A^20*B*C*h^6 - 
    1/10*d*A^19*B^10*C^3*h^2 + 48522/5*d*A^19*B^9*C*h^3 - 57276/5*d*A^19*B^5*C^3*h^4 - 1119488/5*d*A^19*B^4*C*h^5 + 256/5*d*A^19*C^3*h^6 - 104*d*A^18*B^12*C*h^2 + 6593/5*d*A^18*B^8*C^3*h^3 + 
    1464156/5*d*A^18*B^7*C*h^4 - 229952/5*d*A^18*B^3*C^3*h^5 - 40064/5*d*A^18*B^2*C*h^6 - 7/80*d*A^17*B^15*C*h - 119/20*d*A^17*B^11*C^3*h^2 - 218133/5*d*A^17*B^10*C*h^3 + 319524/5*d*A^17*B^6*C^3*h^4 + 
    3592464/5*d*A^17*B^5*C*h^5 + 3648/5*d*A^17*B*C^3*h^6 + 4352/5*d*A^17*C*h^7 + 7511/10*d*A^16*B^13*C*h^2 - 41887/5*d*A^16*B^9*C^3*h^3 - 4155276/5*d*A^16*B^8*C*h^4 + 1185008/5*d*A^16*B^4*C^3*h^5 - 
    153664/5*d*A^16*B^3*C*h^6 + 443/80*d*A^15*B^16*C*h + 1963/20*d*A^15*B^12*C^3*h^2 + 696154/5*d*A^15*B^11*C*h^3 - 242332*d*A^15*B^7*C^3*h^4 - 6939952/5*d*A^15*B^6*C*h^5 - 103488/5*d*A^15*B^2*C^3*h^6 - 
    86016/5*d*A^15*B*C*h^7 + 7/80*d*A^14*B^15*C^3*h - 16602/5*d*A^14*B^14*C*h^2 + 35178*d*A^14*B^10*C^3*h^3 + 8292816/5*d*A^14*B^9*C*h^4 - 3682624/5*d*A^14*B^5*C^3*h^5 + 1896768/5*d*A^14*B^4*C*h^6 - 
    1792/5*d*A^14*C^3*h^7 - 949/16*d*A^13*B^17*C*h - 3208/5*d*A^13*B^13*C^3*h^2 - 1603171/5*d*A^13*B^12*C*h^3 + 3239664/5*d*A^13*B^8*C^3*h^4 + 6252048/5*d*A^13*B^7*C*h^5 + 805632/5*d*A^13*B^3*C^3*h^6 + 
    557824/5*d*A^13*B^2*C*h^7 + 1/80*d*A^12*B^20*C - 109/20*d*A^12*B^16*C^3*h + 52257/5*d*A^12*B^15*C*h^2 - 518686/5*d*A^12*B^11*C^3*h^3 - 10743456/5*d*A^12*B^10*C*h^4 + 1323936*d*A^12*B^6*C^3*h^5 - 
    8325888/5*d*A^12*B^5*C*h^6 + 3072*d*A^12*B*C^3*h^7 + 1024/5*d*A^12*C*h^8 + 10271/40*d*A^11*B^18*C*h + 50723/20*d*A^11*B^14*C^3*h^2 + 2553413/5*d*A^11*B^13*C*h^3 - 5910976/5*d*A^11*B^9*C^3*h^4 + 
    690672*d*A^11*B^8*C*h^5 - 3209728/5*d*A^11*B^4*C^3*h^6 - 1710336/5*d*A^11*B^3*C*h^7 + 99/320*d*A^10*B^21*C + 2151/40*d*A^10*B^17*C^3*h - 93387/4*d*A^10*B^16*C*h^2 + 1078094/5*d*A^10*B^12*C^3*h^3 + 
    6953208/5*d*A^10*B^11*C*h^4 - 5195616/5*d*A^10*B^7*C^3*h^5 + 21556736/5*d*A^10*B^6*C*h^6 - 768/5*d*A^10*B^2*C^3*h^7 + 44032/5*d*A^10*B*C*h^8 - 1/80*d*A^9*B^20*C^3 - 20489/40*d*A^9*B^19*C*h - 
    143063/20*d*A^9*B^15*C^3*h^2 - 2503679/5*d*A^9*B^14*C*h^3 + 6470872/5*d*A^9*B^10*C^3*h^4 - 16365984/5*d*A^9*B^9*C*h^5 + 7713856/5*d*A^9*B^5*C^3*h^6 + 3501312/5*d*A^9*B^4*C*h^7 + 2048/5*d*A^9*C^3*h^8 -
    121/32*d*A^8*B^22*C - 15857/80*d*A^8*B^18*C^3*h + 677709/20*d*A^8*B^17*C*h^2 - 1454286/5*d*A^8*B^13*C^3*h^3 + 1270708/5*d*A^8*B^12*C*h^4 - 2742496/5*d*A^8*B^8*C^3*h^5 - 34085632/5*d*A^8*B^7*C*h^6 - 
    243712/5*d*A^8*B^3*C^3*h^7 - 482304/5*d*A^8*B^2*C*h^8 - 103/320*d*A^7*B^21*C^3 + 31121/80*d*A^7*B^20*C*h + 69012/5*d*A^7*B^16*C^3*h^2 + 1123937/5*d*A^7*B^15*C*h^3 - 2627588/5*d*A^7*B^11*C^3*h^4 + 
    19237056/5*d*A^7*B^10*C*h^5 - 2344128*d*A^7*B^6*C^3*h^6 - 1323776*d*A^7*B^5*C*h^7 - 37888/5*d*A^7*B*C^3*h^8 - 4096*d*A^7*C*h^9 + 479/40*d*A^6*B^23*C + 22833/80*d*A^6*B^19*C^3*h - 
    119693/4*d*A^6*B^18*C*h^2 + 1015729/5*d*A^6*B^14*C^3*h^3 - 5018208/5*d*A^6*B^13*C*h^4 + 8793264/5*d*A^6*B^9*C^3*h^5 + 30290176/5*d*A^6*B^8*C*h^6 + 437248/5*d*A^6*B^4*C^3*h^7 + 
    1115136/5*d*A^6*B^3*C*h^8 + 1111/320*d*A^5*B^22*C^3 + 23283/80*d*A^5*B^21*C*h - 74901/5*d*A^5*B^17*C^3*h^2 + 19771*d*A^5*B^16*C*h^3 - 358456*d*A^5*B^12*C^3*h^4 - 10588992/5*d*A^5*B^11*C*h^5 + 
    10547904/5*d*A^5*B^7*C^3*h^6 + 9256448/5*d*A^5*B^6*C*h^7 + 169984/5*d*A^5*B^2*C^3*h^8 + 172032/5*d*A^5*B*C*h^9 - 471/40*d*A^4*B^24*C - 6883/80*d*A^4*B^20*C^3*h + 166009/10*d*A^4*B^19*C*h^2 - 
    109313/5*d*A^4*B^15*C^3*h^3 + 2098348/5*d*A^4*B^14*C*h^4 - 5809616/5*d*A^4*B^10*C^3*h^5 - 11683328/5*d*A^4*B^9*C*h^6 + 61696*d*A^4*B^5*C^3*h^7 - 233472/5*d*A^4*B^4*C*h^8 + 4096/5*d*A^4*C^3*h^9 - 
    1351/160*d*A^3*B^23*C^3 - 76881/80*d*A^3*B^22*C*h + 35323/5*d*A^3*B^18*C^3*h^2 - 151804/5*d*A^3*B^17*C*h^3 + 1657112/5*d*A^3*B^13*C^3*h^4 + 2067584/5*d*A^3*B^12*C*h^5 - 4265792/5*d*A^3*B^8*C^3*h^6 - 
    5609984/5*d*A^3*B^7*C*h^7 - 191488/5*d*A^3*B^3*C^3*h^8 - 249856/5*d*A^3*B^2*C*h^9 + 1881/320*d*A^2*B^25*C - 5421/40*d*A^2*B^21*C^3*h - 21057/4*d*A^2*B^20*C*h^2 - 29962*d*A^2*B^16*C^3*h^3 + 
    318012/5*d*A^2*B^15*C*h^4 + 839232/5*d*A^2*B^11*C^3*h^5 - 1024/5*d*A^2*B^10*C*h^6 - 821504/5*d*A^2*B^6*C^3*h^7 - 958464/5*d*A^2*B^5*C*h^8 - 16384/5*d*A^2*B*C^3*h^9 - 16384/5*d*A^2*C*h^10 + 
    81/40*d*A*B^24*C^3 + 48717/80*d*A*B^23*C*h - 8412/5*d*A*B^19*C^3*h^2 - 72417/5*d*A*B^18*C*h^3 + 38432/5*d*A*B^14*C^3*h^4 + 214832/5*d*A*B^13*C*h^5 - 73472/5*d*A*B^9*C^3*h^6 - 115712/5*d*A*B^8*C*h^7 - 
    53248/5*d*A*B^4*C^3*h^8 - 53248/5*d*A*B^3*C*h^9 - 513/320*d*B^26*C + 2187/10*d*B^22*C^3*h + 2061/4*d*B^21*C*h^2 - 8552/5*d*B^17*C^3*h^3 - 12948/5*d*B^16*C*h^4 + 22528/5*d*B^12*C^3*h^5 + 
    19776/5*d*B^11*C*h^6 - 11264/5*d*B^7*C^3*h^7 - 11264/5*d*B^6*C*h^8
;
Cd :=
A^25*B^6*h^3 - 48*A^24*B^4*h^4 - 6*A^23*B^7*h^3 + 768*A^23*B^2*h^5 + 480*A^22*B^5*h^4 - 4096*A^22*h^6 - 32*A^21*B^8*h^3 - 10752*A^21*B^3*h^5 + 3*A^20*B^11*h^2 - 456*A^20*B^6*h^4 + 73728*A^20*B*h^6 + 
    203*A^19*B^9*h^3 + 51408*A^19*B^4*h^5 - 87/4*A^18*B^12*h^2 - 11244*A^18*B^7*h^4 - 573952*A^18*B^2*h^6 + 966*A^17*B^10*h^3 - 26256*A^17*B^5*h^5 - 12288*A^17*h^7 - 129/4*A^16*B^13*h^2 + 
    42660*A^16*B^8*h^4 + 2522624*A^16*B^3*h^6 + 3*A^15*B^16*h - 7822*A^15*B^11*h^3 - 723360*A^15*B^6*h^5 + 159744*A^15*B*h^7 + 1239/2*A^14*B^14*h^2 + 52464*A^14*B^9*h^4 - 6851328*A^14*B^4*h^6 - 
    51/2*A^13*B^17*h + 5388*A^13*B^12*h^3 + 3342672*A^13*B^7*h^5 - 847104*A^13*B^2*h^7 - 3783/4*A^12*B^15*h^2 - 704364*A^12*B^10*h^4 + 11822720*A^12*B^5*h^6 - 12288*A^12*h^8 + 579/16*A^11*B^18*h + 
    82158*A^11*B^13*h^3 - 7249392*A^11*B^8*h^5 + 2325504*A^11*B^3*h^7 + A^10*B^21 - 12099/2*A^10*B^16*h^2 + 1972080*A^10*B^11*h^4 - 12835328*A^10*B^6*h^6 + 98304*A^10*B*h^8 + 1227/4*A^9*B^19*h - 
    300951*A^9*B^14*h^3 + 8637264*A^9*B^9*h^5 - 3439872*A^9*B^4*h^7 - 39/4*A^8*B^22 + 110025/4*A^8*B^17*h^2 - 2646732*A^8*B^12*h^4 + 8383872*A^8*B^7*h^6 - 276480*A^8*B^2*h^8 - 23337/16*A^7*B^20*h + 
    454166*A^7*B^15*h^3 - 5436528*A^7*B^10*h^5 + 2550528*A^7*B^5*h^7 - 4096*A^7*h^9 + 583/16*A^6*B^23 - 45762*A^6*B^18*h^2 + 1722120*A^6*B^13*h^4 - 3004352*A^6*B^8*h^6 + 304128*A^6*B^3*h^8 + 
    41163/16*A^5*B^21*h - 310965*A^5*B^16*h^3 + 1514304*A^5*B^11*h^5 - 748800*A^5*B^6*h^7 + 12288*A^5*B*h^9 - 4077/64*A^4*B^24 + 33018*A^4*B^19*h^2 - 424848*A^4*B^14*h^4 + 483328*A^4*B^9*h^6 - 
    89088*A^4*B^4*h^8 - 15525/8*A^3*B^22*h + 72254*A^3*B^17*h^3 - 143088*A^3*B^12*h^5 + 64512*A^3*B^7*h^7 - 4096*A^3*B^2*h^9 + 3159/64*A^2*B^25 - 14985/2*A^2*B^20*h^2 + 22344*A^2*B^15*h^4 - 
    18048*A^2*B^10*h^6 + 3072*A^2*B^5*h^8 + 7047/16*A*B^23*h - 1809*A*B^18*h^3 + 2256*A*B^13*h^5 - 768*A*B^8*h^7 - 729/64*B^26 + 243/4*B^21*h^2 - 108*B^16*h^4 + 64*B^11*h^6
;


an := Evaluate(An,vec);
ad := Evaluate(Ad,vec);
bn := Evaluate(Bn,vec);
bd := Evaluate(Bd,vec);
cn := Evaluate(Cn,vec);
cd := Evaluate(Cd,vec);

aa := an/ad;
bb := bn/bd;
cc := cn/cd;
sigma1 :=(1/2)*(2*h - aa^5 - 5*aa*bb^2 + 5*aa^3*bb - cc^2 *(aa^2 - 4*bb));
dd := cc*(h +aa^5 + 5*aa*bb^2 - 5*aa^3*bb + sigma1 - aa*(aa^2-3*bb)*(aa^2-bb))/(aa^4 -bb*(3*aa^2 - bb));

rvec := [aa,bb,cc,dd];

return rvec;

end function;



cantorAdd := function(u1,v1,u2,v2,k) 
R<x> := Parent(u1);
f := x^5 + k;
d1,e1,e2 := XGCD(u1,u2);
d,c1,c2 :=  XGCD(d1,v1+v2);
s1 := c1*e1;  s2 := c1*e2 ; s3 := c2;
u := R! (u1*u2/(d^2)) ; 
v := R!((s1*u1*v2 + s2*u2*v1 + s3*(v1*v2+f))/d) mod u; 

	while true do 
		U := R!((f-v^2)/u);  
		V := R!-v mod U;
		u := U; 
		v := V;
		printf "u=%o, v=%o\n",u,v;
		if Degree(u) le 2 then 
			break;
		end if;
	end while;
   
r := Coefficient(u,Degree(u));
u := u/r;
return u,v;
end function;





h := 10;
p := (2*5^4 - 1);
F1 := GF(p);
P1<x> := PolynomialRing(F1);
f := x^5+ h;
H1 := HyperellipticCurve(f);
J1 := Jacobian(H1);
Pt1 := J1![x+1,3];
d1 := 3*Pt1;

F2 := GF(p^2);
J2 := BaseExtend(J1,F2);
P2<X> := PolynomialRing(F2);
Pt2 := J2![X+1,3];
d2 := 3*Pt2;



w:= multrzrat(J1,d1,Sqrt(F1!5));
z:=multrzrat(J1,d1,-Sqrt(F1!5));

mulsq5(J2,d2);
-mulsq5(J2,d2);
mulsq5rat(J1,d1,Sqrt(F1!5));
mulsq5rat(J1,d1,-Sqrt(F1!5));





n := 339;
p := 4*5^n - 1;
time IsPrime(p);
P<x> := PolynomialRing(GF(p));
J := Jacobian(HyperellipticCurve( x^5 + 10 ) );
Pt := J![x+1,3];
Di := 4*Pt;
k := Integers()!((n+1)/2);
s := GF(p)!2*5^k;
s^2;
for i := 1 to 2*n-1 do Di := mulsq5rat(J,Di,s); printf "Iteration %o\n",i; end for;
2*n-2;

