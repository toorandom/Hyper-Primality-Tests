mulz5n := function(J,D,n)

F := BaseField(J);
P<X> := PolynomialRing(F);
z5 := (RootOfUnity(5,F))^n;
if Degree(D[1]) eq 1 then 
	a := z5*Coefficient(D[1],0);
	b := Coefficient(D[2],0);
	D5 := J![X+a,b];
	return D5;
end if;
A := z5*Coefficient(D[1],1);
B := z5^2*Coefficient(D[1],0);
C := (1/z5)*Coefficient(D[2],1);
D := Coefficient(D[2],0);

U := X^2 + A*X + B;
V := C*X + D;
D5 := J![U,V];
return D5;
end function;


mulsq5 := function(J,D)

D1 := mulz5n(J,D,1);
D4 := mulz5n(J,D,4);
D0 := D;

return 2*D1 + 2*D4 + D0;

end function;



l := [ 4,6,24,30,54,96 ] ;
for n in l do 
printf "Checking 2*5^n - 1 for n=%o\n",n;
p := 2*5^n - 1;
F := GF(p);
F2<a> := GF(p^2);
P<x> := PolynomialRing(F);
f := x^5 + 10;
H := HyperellipticCurve(f);
J := Jacobian(H);

J2 := BaseExtend(J,F2);
R<X> := PolynomialRing(F2);
D0 := J2![X+1,3];

D := 2*D0;

for i := 1 to 2*n do 
	D := mulsq5(J2,D);
	if i eq 2*n-1 then
		printf "Iteration 2*n-1=%o\n",i;
		D;
	end if;
	if i eq 2*n then 
		printf "Iteration 2*n  =%o\n",i;
		D;
		printf "\n";
	end if;
end for;
end for;
